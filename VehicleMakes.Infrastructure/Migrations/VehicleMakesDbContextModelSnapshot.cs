// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleMakes.Infrastructure;

#nullable disable

namespace VehicleMakes.Infrastructure.Migrations
{
    [DbContext(typeof(VehicleMakesDbContext))]
    partial class VehicleMakesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.Body", b =>
                {
                    b.Property<int>("BodyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BodyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyId"));

                    b.Property<string>("BodyNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BodyNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BodyId");

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.DriveType1", b =>
                {
                    b.Property<int>("DriveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DriveTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriveTypeId"));

                    b.Property<string>("DriveTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DriveTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DriveTypeId")
                        .HasName("PK_DriveType1");

                    b.ToTable("DriveTypes");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.FuelType", b =>
                {
                    b.Property<int>("FuelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FuelTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelTypeId"));

                    b.Property<string>("FuelTypeNameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FuelTypeNameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FuelTypeId")
                        .HasName("PK_FuleTypes");

                    b.ToTable("FuelTypes");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.Identity.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshToken");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.Make", b =>
                {
                    b.Property<int>("MakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MakeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MakeId"));

                    b.Property<string>("MakeNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MakeNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MakeId")
                        .HasName("PK_Make");

                    b.ToTable("Makes");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.MakeModel", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<int>("MakeId")
                        .HasColumnType("int")
                        .HasColumnName("MakeID");

                    b.Property<string>("ModelNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModelNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ModelId");

                    b.HasIndex("MakeId");

                    b.ToTable("MakeModels");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.SubModel", b =>
                {
                    b.Property<int>("SubModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubModelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubModelId"));

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    b.Property<string>("SubModelNameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubModelNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("SubModels");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.VehicleDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("BodyId")
                        .HasColumnType("int")
                        .HasColumnName("BodyID");

                    b.Property<int?>("DriveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DriveTypeID");

                    b.Property<string>("Engine")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("EngineCc")
                        .HasColumnType("smallint")
                        .HasColumnName("Engine_CC");

                    b.Property<byte?>("EngineCylinders")
                        .HasColumnType("tinyint")
                        .HasColumnName("Engine_Cylinders");

                    b.Property<decimal?>("EngineLiterDisplay")
                        .HasColumnType("money")
                        .HasColumnName("Engine_Liter_Display");

                    b.Property<int?>("FuelTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FuelTypeID");

                    b.Property<int?>("MakeId")
                        .HasColumnType("int")
                        .HasColumnName("MakeID");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    b.Property<byte?>("NumDoors")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SubModelId")
                        .HasColumnType("int")
                        .HasColumnName("SubModelID");

                    b.Property<string>("VehicleDisplayName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Vehicle_Display_Name");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("PK_CarDetails");

                    b.HasIndex("BodyId");

                    b.HasIndex("DriveTypeId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("SubModelId");

                    b.ToTable("VehicleDetails");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.VehicleMasterDetail", b =>
                {
                    b.Property<int?>("BodyId")
                        .HasColumnType("int")
                        .HasColumnName("BodyID");

                    b.Property<string>("BodyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DriveTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DriveTypeID");

                    b.Property<string>("DriveTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Engine")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("EngineCc")
                        .HasColumnType("smallint")
                        .HasColumnName("Engine_CC");

                    b.Property<byte?>("EngineCylinders")
                        .HasColumnType("tinyint")
                        .HasColumnName("Engine_Cylinders");

                    b.Property<decimal?>("EngineLiterDisplay")
                        .HasColumnType("money")
                        .HasColumnName("Engine_Liter_Display");

                    b.Property<int?>("FuelTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FuelTypeID");

                    b.Property<string>("FuelTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MakeId")
                        .HasColumnType("int")
                        .HasColumnName("MakeID");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte?>("NumDoors")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SubModelId")
                        .HasColumnType("int")
                        .HasColumnName("SubModelID");

                    b.Property<string>("SubModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VehicleDisplayName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Vehicle_Display_Name");

                    b.Property<short?>("Year")
                        .HasColumnType("smallint");

                    b.ToTable((string)null);

                    b.ToView("VehicleMasterDetails", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("VehicleMakes.Data.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("VehicleMakes.Data.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("VehicleMakes.Data.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("VehicleMakes.Data.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleMakes.Data.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("VehicleMakes.Data.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.Identity.UserRefreshToken", b =>
                {
                    b.HasOne("VehicleMakes.Data.Entities.Identity.User", "user")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.MakeModel", b =>
                {
                    b.HasOne("VehicleMakes.Data.Entities.Make", "Make")
                        .WithMany("MakeModels")
                        .HasForeignKey("MakeId")
                        .IsRequired()
                        .HasConstraintName("FK_MakeModels_Makes");

                    b.Navigation("Make");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.SubModel", b =>
                {
                    b.HasOne("VehicleMakes.Data.Entities.MakeModel", "Model")
                        .WithMany("SubModels")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("FK_SubModels_MakeModels");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.VehicleDetail", b =>
                {
                    b.HasOne("VehicleMakes.Data.Entities.Body", "Body")
                        .WithMany("VehicleDetails")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_VehicleDetails_Bodies");

                    b.HasOne("VehicleMakes.Data.Entities.DriveType1", "DriveType")
                        .WithMany("VehicleDetails")
                        .HasForeignKey("DriveTypeId")
                        .HasConstraintName("FK_VehicleDetails_DriveTypes");

                    b.HasOne("VehicleMakes.Data.Entities.FuelType", "FuelType")
                        .WithMany("VehicleDetails")
                        .HasForeignKey("FuelTypeId")
                        .HasConstraintName("FK_VehicleDetails_FuelTypes");

                    b.HasOne("VehicleMakes.Data.Entities.SubModel", "SubModel")
                        .WithMany("VehicleDetails")
                        .HasForeignKey("SubModelId")
                        .HasConstraintName("FK_VehicleDetails_SubModels");

                    b.Navigation("Body");

                    b.Navigation("DriveType");

                    b.Navigation("FuelType");

                    b.Navigation("SubModel");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.Body", b =>
                {
                    b.Navigation("VehicleDetails");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.DriveType1", b =>
                {
                    b.Navigation("VehicleDetails");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.FuelType", b =>
                {
                    b.Navigation("VehicleDetails");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.Identity.User", b =>
                {
                    b.Navigation("UserRefreshTokens");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.Make", b =>
                {
                    b.Navigation("MakeModels");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.MakeModel", b =>
                {
                    b.Navigation("SubModels");
                });

            modelBuilder.Entity("VehicleMakes.Data.Entities.SubModel", b =>
                {
                    b.Navigation("VehicleDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
